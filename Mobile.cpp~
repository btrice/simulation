#include "Mobile.h"
#include "Terre.h"
#include<iostream>
Mobile::Mobile(const std::string& _n,int _i):nom(_n),mode(_i){
}

int Mobile::get_mode(){
	return mode;
}

void Mobile::avance(double dt){
	
	/*Vecteur3D _p=get_position();
		  _p[0]+=dt*get_vitesse()[0];
		  _p[1]+=dt*get_vitesse()[1];
		  _p[2]+=dt*get_vitesse()[2];
	set_position(_p);*/
	position = position + dt * vitesse;
	//position.affichage();
	
}

void  Mobile::affichage(){
 
	std::cout<<" AFFICHAGE MOBILE \n";
	std::cout<<" Nom du mobile "<< nom <<"\n";
 	std::cout<< "Position x = " << position[0] <<"\n";
 	std::cout<< "Position y = " << position[1] <<"\n";
	std::cout<< "Position z = " << position[2] <<"\n";
	std::cout<< "Vitesse x = " << vitesse[0] <<"\n";
	std::cout<< "Vitesse y = " << vitesse[1] <<"\n";
	std::cout<< "Vitesse z = " << vitesse[2] <<"\n";
}

std::string& Mobile::get_nom(){
	
	return nom;
}

void Mobile::set_nom(std::string& _n){
	
	nom=_n;
}

Vecteur3D& Mobile::get_position(){
	
	return position;
}

void Mobile::set_position(Vecteur3D& _p){

	position=_p;
}

Vecteur3D& Mobile::get_vitesse(){

	return vitesse;
}
void Mobile::set_vitesse(Vecteur3D& _v){

	vitesse=_v;
}

Vecteur3D Mobile::get_G(const Vecteur3D& x, const Vecteur3D& v) const{
	
	Terre *T=Terre::getInstance();
return T->gravite(x);
}

Mobile::Mobile(const Mobile& m){
	
	if(this != &m) // l'objet ne doit pas ce copier dans lui mÃªme
	{
		nom = m.nom;
		position = m.position;
		vitesse = m.vitesse;
		mode = m.mode;
	}
}

Mobile* Mobile::copie(){
	
	Mobile *m=new Mobile(*this); //on transmet l'objet a copier au constructeur par copie

return m;
}

Mobile::~Mobile(){

}
